{"version":3,"sources":["Algorithms/bubblesort.js","Algorithms/mergesort.js","Sorting/Sort.jsx","App.js","reportWebVitals.js","index.js"],"names":["bubblesort","inputArr","anims","i","length","j","temp","push","mergesort","array","mergesortRec","auxiliary","left","right","middle","Math","floor","mergeArrays","rightIndex","leftIndex","auxIndex","Sort","props","console","log","state","this","resetArray","clearTimeout","timeout","min","max","random","setState","arraybars","document","getElementsByClassName","style","backgroundColor","id1","id2","style1","style2","height","delay","finished","className","map","value","idx","onClick","bubbleSort","mergeSort","React","Component","n","Promise","done","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d1e4997.chunk.js","sourcesContent":["export const bubblesort = inputArr => {\r\n    let anims = [];\r\n    for (let i = 0; i < inputArr.length; i++) {\r\n        for (let j = 0; j < inputArr.length - 1; j++) {\r\n            if (inputArr[j] > inputArr[j + 1] ) {\r\n                let temp = inputArr[j];\r\n                inputArr[j] = inputArr[j + 1];\r\n                inputArr[j + 1] = temp;\r\n                anims.push([j, j + 1]);\r\n            }\r\n        }\r\n    }\r\n    return anims;\r\n};","export const mergesort = array => {\r\n    let auxiliary = [];\r\n    let anims = [];\r\n    mergesortRec(array, auxiliary, 0, array.length - 1, anims);\r\n    return anims;\r\n};\r\n\r\nexport const mergesortRec = (array, auxiliary, left, right, anims) => {\r\n    if (right <= left) {\r\n        return;\r\n    }\r\n    const middle = Math.floor((left + right)/2);\r\n    mergesortRec(array, auxiliary, left, middle, anims);\r\n    mergesortRec(array, auxiliary, middle + 1, right, anims);\r\n    mergeArrays(array, auxiliary, left, right, anims);\r\n}\r\n\r\nexport const mergeArrays = (array, auxiliary, left, right, anims) => {\r\n\r\n    let rightIndex =  Math.floor((left + right)/2) + 1;\r\n    let leftIndex = left;\r\n    let auxIndex = left;\r\n\r\n    // copy the bigger element from the array to aux\r\n    while (leftIndex <= Math.floor((right + left)/2) && rightIndex <= right) {\r\n        if (array[leftIndex] <= array[rightIndex]) {\r\n            auxiliary[auxIndex++] = array[leftIndex++];\r\n        }\r\n        else {\r\n            auxiliary[auxIndex++] = array[rightIndex++];\r\n        }\r\n    }\r\n\r\n    // when one of them runs out of elements, copy the rest from the other to aux\r\n    while (leftIndex <= Math.floor((right + left)/2) ) {\r\n        auxiliary[auxIndex++] = array[leftIndex++];\r\n    }\r\n    while (rightIndex <= right ) {\r\n        auxiliary[auxIndex++] = array[rightIndex++];\r\n    }\r\n\r\n    //from aux copy elements to original array\r\n    for (let i = left; i < left + (right - left) + 1; i++) {\r\n        array[i] = auxiliary[i];\r\n        anims.push([i, auxiliary[i]]);\r\n    }\r\n}","import React from \"react\";\r\nimport { bubblesort } from \"../Algorithms/bubblesort\";\r\nimport { mergesort } from \"../Algorithms/mergesort\";\r\n\r\nimport \"./Sort.css\";\r\n\r\nexport default class Sort extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n\r\n        this.state = {array: [],\r\n        \r\n        };\r\n    }\r\n\r\n    // when the app loads for the first time\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeout);\r\n      }\r\n\r\n    // reset the random array\r\n    resetArray() {\r\n        const array = [];\r\n\r\n        for (let i = 0; i < 300; i++) {\r\n            array.push(randomIntFromInterval(5, 500));\r\n        }\r\n        this.setState({array});\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        console.log(\"HEERE: \" +  arraybars[0]);\r\n        //arraybars[0].style.backgroundColor = \"white\";\r\n        for (let i = 0; i < arraybars.length; i++) {\r\n            console.log(\"log: \" + i);\r\n            arraybars[i].style.backgroundColor = \"white\";\r\n            console.log(\"HEERE: \" +  arraybars[i]);\r\n        }\r\n    }\r\n\r\n    async bubbleSort() {\r\n        const anims = bubblesort(this.state.array);\r\n        //console.log(anims);\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        \r\n        for (let i = 0; i < anims.length; i++) {\r\n            \r\n                const [id1, id2] = anims[i];\r\n                const style1 = arraybars[id1].style;\r\n                const style2 = arraybars[id2].style;\r\n                style1.backgroundColor = \"red\";\r\n                style1.backgroundColor = \"white\";\r\n                const temp = style1.height;\r\n                style1.height = style2.height;\r\n                style2.height = temp;\r\n                style2.backgroundColor = \"red\";\r\n\r\n                await delay(1);\r\n                \r\n                style2.backgroundColor = \"white\";\r\n                //console.log(i);\r\n                \r\n        };\r\n        \r\n        this.finished();\r\n    }\r\n\r\n    async mergeSort() {\r\n    \r\n        const anims = mergesort(this.state.array);\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        \r\n        for (let i = 0; i < anims.length; i++) {\r\n            \r\n                const [id1, id2] = anims[i];\r\n                const style1 = arraybars[id1].style;\r\n                style1.height = `${id2}px`;\r\n                style1.backgroundColor = \"red\";\r\n                await delay(1);\r\n                style1.backgroundColor = \"white\";\r\n\r\n        };\r\n        this.finished();\r\n    }\r\n\r\n    async finished() {\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        for (let i = 0; i < arraybars.length; i++) {\r\n            arraybars[i].style.backgroundColor = \"green\";\r\n            await delay(0.1);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"cont\">\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                    className=\"array\" \r\n                    key={idx}\r\n                    style={{height: `${value}px`}}>\r\n                    </div>\r\n\r\n\r\n                ))}\r\n                \r\n    \r\n            </div>\r\n            <div className=\"buttonCont\">\r\n                <button onClick={() => this.resetArray()}>Reset Array</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubblesort</button>\r\n                <button onClick={() => this.mergeSort()}>MergeSort</button>\r\n            </div>\r\n            </>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction delay(n) {  \r\n    n = n || 2000;\r\n    return new Promise(done => {\r\n      setTimeout(() => {\r\n        done();\r\n      }, n);\r\n    });\r\n  }\r\n\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max-min + 1) + min);\r\n}\r\n","import React from \"react\";\nimport Sort from \"./Sorting/Sort.jsx\";\n\nfunction App() {\n  return (\n    <>\n      <Sort>\n\n      </Sort>\n    \n    \n    \n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}