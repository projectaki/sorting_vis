{"version":3,"sources":["Algorithms/bubblesort.js","Algorithms/mergesort.js","Sorting/Sort.jsx","compnents/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["bubblesort","inputArr","anims","i","length","j","temp","push","mergesort","array","mergesortRec","auxiliary","left","right","middle","Math","floor","mergeArrays","rightIndex","leftIndex","auxIndex","Sort","props","state","terminate","running","this","setupArray","randomIntFromInterval","setState","arraybars","document","getElementsByClassName","style","backgroundColor","height","bubbleSortCode","console","log","mergeSortCode","same","arrayb","arrayj","numb","sort","a","b","delay","id1","id2","style1","style2","finished","className","map","value","idx","width","class","onClick","resetArray","bubbleSort","mergeSort","React","Component","n","Promise","done","setTimeout","min","max","random","Navbar","display","gridTemplateColumns","paddingLeft","href","margin","marginLeft","fontSize","padding","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.153e091f.chunk.js","sourcesContent":["export const bubblesort = inputArr => {\r\n    let anims = [];\r\n    for (let i = 0; i < inputArr.length; i++) {\r\n        for (let j = 0; j < inputArr.length - 1; j++) {\r\n            if (inputArr[j] > inputArr[j + 1] ) {\r\n                let temp = inputArr[j];\r\n                inputArr[j] = inputArr[j + 1];\r\n                inputArr[j + 1] = temp;\r\n                anims.push([j, j + 1]);\r\n            }\r\n        }\r\n    }\r\n    return [anims,inputArr];\r\n};","export const mergesort = array => {\r\n    let auxiliary = [];\r\n    let anims = [];\r\n    mergesortRec(array, auxiliary, 0, array.length - 1, anims);\r\n    return anims;\r\n};\r\n\r\nexport const mergesortRec = (array, auxiliary, left, right, anims) => {\r\n    if (right <= left) {\r\n        return;\r\n    }\r\n    const middle = Math.floor((left + right)/2);\r\n    mergesortRec(array, auxiliary, left, middle, anims);\r\n    mergesortRec(array, auxiliary, middle + 1, right, anims);\r\n    mergeArrays(array, auxiliary, left, right, anims);\r\n}\r\n\r\nexport const mergeArrays = (array, auxiliary, left, right, anims) => {\r\n\r\n    let rightIndex =  Math.floor((left + right)/2) + 1;\r\n    let leftIndex = left;\r\n    let auxIndex = left;\r\n\r\n    // copy the bigger element from the array to aux\r\n    while (leftIndex <= Math.floor((right + left)/2) && rightIndex <= right) {\r\n        if (array[leftIndex] <= array[rightIndex]) {\r\n            auxiliary[auxIndex++] = array[leftIndex++];\r\n        }\r\n        else {\r\n            auxiliary[auxIndex++] = array[rightIndex++];\r\n        }\r\n    }\r\n\r\n    // when one of them runs out of elements, copy the rest from the other to aux\r\n    while (leftIndex <= Math.floor((right + left)/2) ) {\r\n        auxiliary[auxIndex++] = array[leftIndex++];\r\n    }\r\n    while (rightIndex <= right ) {\r\n        auxiliary[auxIndex++] = array[rightIndex++];\r\n    }\r\n\r\n    //from aux copy elements to original array\r\n    for (let i = left; i < left + (right - left) + 1; i++) {\r\n        array[i] = auxiliary[i];\r\n        anims.push([i, auxiliary[i]]);\r\n    }\r\n}","import React from \"react\";\r\nimport { bubblesort } from \"../Algorithms/bubblesort\";\r\nimport { mergesort } from \"../Algorithms/mergesort\";\r\n\r\nimport \"./Sort.css\";\r\n\r\nexport default class Sort extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n\r\n        this.state = {array: [],\r\n            terminate: true,\r\n            running: false\r\n        \r\n        };\r\n    }\r\n\r\n    // when the app loads for the first time\r\n    componentDidMount() {\r\n        this.setupArray();\r\n    }\r\n\r\n\r\n    // reset the random array\r\n    setupArray() {\r\n        const temp = [];\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n            temp.push(randomIntFromInterval(5, 60));\r\n        }\r\n        this.setState({array: temp});\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        \r\n        //arraybars[0].style.backgroundColor = \"white\";\r\n        for (let i = 0; i < arraybars.length; i++) {\r\n            \r\n            arraybars[i].style.backgroundColor = \"white\";\r\n            arraybars[i].style.height = temp[i] +\"vh\";\r\n            \r\n        }\r\n    }\r\n\r\n    resetArray() {\r\n        this.setState({terminate: true});\r\n        this.setState({running: false});\r\n        this.setupArray();\r\n    }\r\n\r\n    bubbleSort() {\r\n        if(this.state.running === false) {\r\n            this.setState({running: true});\r\n            this.bubbleSortCode();\r\n        }\r\n        console.log(this.state.array);\r\n    }\r\n\r\n    mergeSort() {\r\n        if(this.state.running === false) {\r\n            this.setState({running: true});\r\n            this.mergeSortCode();\r\n        }\r\n    }\r\n\r\n    testSorting() {\r\n        let same = 0;\r\n        for (let j = 0; j < 100; j++) {\r\n            let arrayb = [];\r\n            let arrayj = [];\r\n            for (let i = 0; i < 100; i++) {\r\n                let numb = randomIntFromInterval(5, 60);\r\n                arrayb.push(numb);\r\n                arrayj.push(numb);\r\n            }\r\n            arrayj.sort(function(a,b){return a - b});\r\n            arrayb = bubblesort(arrayb)[1];\r\n            console.log(arrayj);\r\n            console.log(arrayb);\r\n\r\n            \r\n\r\n            for (let i = 0; i < arrayj.length;i++) {\r\n                if(arrayj[i] !== arrayb[i]) {\r\n                    same++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        console.log(same);\r\n\r\n    }\r\n\r\n    async bubbleSortCode() {\r\n        this.setState({terminate: false});\r\n        await delay(1);\r\n        const anims = bubblesort(this.state.array)[0];\r\n        //console.log(anims);\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        \r\n        for (let i = 0; i < anims.length; i++) {\r\n            if(this.state.terminate === true) {\r\n                return;\r\n            }\r\n            const [id1, id2] = anims[i];\r\n            const style1 = arraybars[id1].style;\r\n            const style2 = arraybars[id2].style;\r\n            style1.backgroundColor = \"red\";\r\n            style1.backgroundColor = \"white\";\r\n            const temp = style1.height;\r\n            style1.height = style2.height;\r\n            style2.height = temp;\r\n            style2.backgroundColor = \"red\";\r\n\r\n            await delay(1);\r\n            \r\n            style2.backgroundColor = \"white\";\r\n                \r\n                \r\n        };\r\n        \r\n        this.finished();\r\n    }\r\n\r\n    async mergeSortCode() {\r\n        this.setState({terminate: false});\r\n        await delay(1);\r\n        const anims = mergesort(this.state.array);\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        \r\n        for (let i = 0; i < anims.length; i++) {\r\n            if(this.state.terminate === true) {\r\n                return;\r\n            }\r\n            const [id1, id2] = anims[i];\r\n            const style1 = arraybars[id1].style;\r\n            style1.height = `${id2}vh`;\r\n            style1.backgroundColor = \"red\";\r\n            await delay(1);\r\n            style1.backgroundColor = \"white\";\r\n\r\n        };\r\n        this.finished();\r\n    }\r\n\r\n    async finished() {\r\n        const arraybars = document.getElementsByClassName(\"array\");\r\n        for (let i = 0; i < arraybars.length; i++) {\r\n            arraybars[i].style.backgroundColor = \"green\";\r\n            await delay(0.1);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"cont\">\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                    className=\"array\" \r\n                    key={idx}\r\n                    style={{height: `${value}vh`, width: `0.6vw`}}>\r\n                    </div>\r\n\r\n\r\n                ))}\r\n                \r\n    \r\n            </div>\r\n           \r\n            <div class=\"row\">\r\n                <div class=\"col s4\">\r\n                    <center>\r\n                        <button className=\"waves-effect waves-light btn\" onClick={() => this.resetArray()}>Reset Array</button>\r\n                    </center>\r\n                </div>\r\n                <div class=\"col s4\">\r\n                    <center>\r\n                        <button className=\"waves-effect waves-light btn\" onClick={() => this.bubbleSort()}>Bubblesort</button>\r\n                    </center>\r\n                </div>\r\n                <div class=\"col s4\">\r\n                    <center>\r\n                        <button className=\"waves-effect waves-light btn\" onClick={() => this.mergeSort()}>MergeSort</button>\r\n                        \r\n                    </center>\r\n                </div>\r\n            </div>\r\n            </>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction delay(n) {  \r\n    n = n || 2000;\r\n    return new Promise(done => {\r\n      setTimeout(() => {\r\n        done();\r\n      }, n);\r\n    });\r\n  }\r\n\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max-min + 1) + min);\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                    <nav>\r\n                    <div class=\"nav-wrapper\">\r\n                        <div style={{display: \"grid\", gridTemplateColumns: \"20vw 80vw\"}}>\r\n                            <div className=\"grid-item\" style={{paddingLeft: \"1vw\"}}>\r\n                                <a href=\"https://projectaki.github.io/portfolio_akos_madarasz/#/Projects\">\r\n                                    <i class=\"fas fa-arrow-left\"></i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <div className=\"grid-item\"></div>\r\n                                    <p style={{margin: 0, marginLeft: \"25vw\", fontSize: \"3vh\", padding: 0}}>Sorting Visualiser</p>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                        \r\n                    </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\nimport Sort from \"./Sorting/Sort.jsx\";\nimport Navbar from \"./compnents/Navbar\"\nfunction App() {\n  return (\n    <>\n        <Navbar/>\n        <Sort/>\n\n    \n    \n    \n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}